@page "/chats"

<div class="chats-page">
    <div class="users">
        <h2>Users</h2>
        <div class="users-list">
            @foreach (var user in LoadedUsers.Where(u => u.Id != _socketService.User.Id))
            {
                <div class="user-item">
                    <div class="user-item__title">
                        @user.Name
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="chats">
        <h2>Chats</h2>
        <button @onclick="LoadChats">Load</button>
        <div class="chat-list">
            @foreach (var chat in LoadedChats)
                {
                    <div class="chat-item">
                        <div class="chat-item__title">
                            @if (chat.Type == ChatType.Public)
                            {
                                <span>Форум</span>
                            }
                            else
                            {
                                <span>@(chat.Users.First(u => u.Id != _socketService.User.Id).Name)</span>
                            }
                        </div>
                    </div>
                }
        </div>
    </div>
</div>

@using Client.Socket
@using global::Shared.Message
@using global::Shared.Message.Responses
@using Client.Services
@using global::Shared.Message.Events
@using global::Shared.Message.Requests
@using global::Shared.Model
@inherits OwningComponentBase
@inject SocketService _socketService;
@inject DialogService _dialogService;
@inject EventSubManager EventSubManager;

@code {

    public List<ChatInfo> LoadedChats = new();
    public List<UserInfo> LoadedUsers = new();

    private async Task OnChatsLoaded(GetChatsResponse response)
    {
        LoadedChats = response.Chats;
        StateHasChanged();
    }
    
    private async Task OnJoinedChat(UserJoinedChatEvent e)
    {
        if (e.User.Id == _socketService.User.Id || LoadedChats.Any(c => c.Id == e.ChatId))
            await this.LoadChats();
    }
    
    private async Task OnUsersLoaded(GetUsersResponse response)
    {
        LoadedUsers = response.Users;
        StateHasChanged();
    }
    
    private async Task OnError(ErrorResponse response)
    {
        await _dialogService.DisplayAlert("Error!", response.Message);
    }

    public async Task LoadChats()
    {
        await _socketService.Send(new GetChatsRequest());
    }
    
    public async Task LoadUsers()
    {
        await _socketService.Send(new GetUsersRequest());
    }

    protected override async Task OnInitializedAsync()
    {
        EventSubManager.Subscribe<GetChatsResponse>(OnChatsLoaded);
        EventSubManager.Subscribe<GetUsersResponse>(OnUsersLoaded);
        EventSubManager.Subscribe<UserJoinedChatEvent>(OnJoinedChat);
        EventSubManager.Subscribe<ErrorResponse>(OnError);

        await LoadChats();
    }

}