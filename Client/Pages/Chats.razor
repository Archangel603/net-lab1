@page "/chats"

<div class="chats-page">
    <div class="users">
        <h2>Users</h2>
        <div class="users-list">
            @foreach (var user in LoadedUsers.Where(u => u.Id != _socketService.User.Id))
            {
                <div class="user-item" @onclick="@(e => OnUserClick(user))">
                    <img src="img/user.png" />
                    <div class="user-item__title">
                        @user.Name
                    </div>
                </div>
            }
        </div>
        @if (SelectedChat is not null)
        {
            <div class="btn chat-back" @onclick="(e => SelectChat(null))">
                &lt; Back
            </div>
        }
    </div>
    @if (SelectedChat is null)
    {
        <div class="chats">
            <h2>Chats</h2>
            <div class="chat-list">
                @foreach (var chat in LoadedChats)
                {
                    <ChatItem Chat="chat" OnClick="@(e => SelectChat(chat))" />
                }
            </div>
        </div>
    }
    else
    {
        <Chat ChatInfo="SelectedChat" />
    }
</div>
@using Client.Socket
@using global::Shared.Message.Events
@using global::Shared.Message.Requests
@using global::Shared.Message.Responses
@using global::Shared.Model
@using Client.Components
@using Client.Services
@inherits OwningComponentBase
@inject SocketService _socketService;
@inject DialogService _dialogService;
@inject EventSubManager _eventSubManager;

@code {

    public ChatInfo? SelectedChat = null;
    
    public List<ChatInfo> LoadedChats = new();
    public List<UserInfo> LoadedUsers = new();

    private async Task OnChatsLoaded(GetChatsResponse response)
    {
        LoadedChats = response.Chats;
        StateHasChanged();
    }
    
    private async Task OnJoinedChat(UserJoinedChatEvent e)
    {
        if (e.User.Id == _socketService.User.Id || LoadedChats.Any(c => c.Id == e.ChatId))
            await this.LoadChats();
    }
    
    private async Task OnUsersLoaded(GetUsersResponse response)
    {
        LoadedUsers = response.Users;
        StateHasChanged();
    }
    
    private async Task OnError(ErrorResponse response)
    {
        await _dialogService.DisplayAlert("Error!", response.Message);
    }

    public void SelectChat(ChatInfo chat)
    {
        SelectedChat = chat;
        StateHasChanged();
    }
    
    public async Task LoadChats()
    {
        await _socketService.Send(new GetChatsRequest());
    }
    
    public async Task LoadUsers()
    {
        await _socketService.Send(new GetUsersRequest());
    }

    public async Task OnUserClick(UserInfo user)
    {
        var existingChat = LoadedChats
            .FirstOrDefault(c => c.Type == ChatType.Private && c.Users.Any(u => u.Id == user.Id));

        if (existingChat is null)
        {
            await _socketService.Send(new CreatePersonalChatRequest(user.Id));
        }
        else
        {
            SelectChat(existingChat);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _eventSubManager.Subscribe<GetChatsResponse>(OnChatsLoaded);
        _eventSubManager.Subscribe<GetUsersResponse>(OnUsersLoaded);
        _eventSubManager.Subscribe<UserJoinedChatEvent>(OnJoinedChat);
        _eventSubManager.Subscribe<ErrorResponse>(OnError);

        await LoadChats();
        await LoadUsers();
    }

}